import json
from pymongo import MongoClient

client = MongoClient("mongodb://localhost:27017/")
db = client["plants"]
collection = db["plants"]

def get_user_criteria():
    def ask(prompt, options):
        while True:
            print(f"{prompt} ({'/'.join(options)}):")
            value = input().strip().lower()
            if value in options:
                return value
            print("–û—à–∏–±–∫–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    criteria = {
        "light": ask("–¢–∏–ø –æ—Å–≤–µ—â–µ–Ω–∏—è", ["—è—Ä–∫–æ–µ", "—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π", "–ø–æ–ª—É—Ç–µ–Ω—å", "—Ç–µ–Ω—å"]),
        "temperature": ask("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", ["–≤—ã—Å–æ–∫–∞—è", "—É–º–µ—Ä–µ–Ω–Ω–∞—è", "—Ö–æ–ª–æ–¥–Ω–∞—è"]),
        "humidity": ask("–í–ª–∞–∂–Ω–æ—Å—Ç—å", ["—Å—É—Ö–æ", "—Å—Ä–µ–¥–Ω–µ", "–≤–ª–∞–∂–Ω–æ"]),
        "experience": ask("–û–ø—ã—Ç —É—Ö–æ–¥–∞", ["–Ω–æ–≤–∏—á–æ–∫", "—Å—Ä–µ–¥–Ω–∏–π", "–æ–ø—ã—Ç–Ω—ã–π"]),
        "space": ask("–†–∞–∑–º–µ—Ä –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", ["–º–∞–ª–µ–Ω—å–∫–æ–µ", "—Å—Ä–µ–¥–Ω–µ–µ", "–±–æ–ª—å—à–æ–µ"]),
    }

    return criteria

def recommend_plants(criteria):
    query = {
        "light": {"$in": [criteria["light"]]},
        "temperature": criteria["temperature"],
        "humidity": criteria["humidity"],
        "experience": criteria["experience"],
        "space": criteria["space"]
    }
    results = list(collection.find(query, {"_id": 0}))
    return results

def explain_result(plant, criteria):
    explanation = f"‚úÖ {plant['name']} –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞–º, –ø–æ—Ç–æ–º—É —á—Ç–æ:"
    for key in criteria:
        explanation += f"\n - {key.capitalize()}: {plant.get(key, '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} (–≤—ã –≤—ã–±—Ä–∞–ª–∏: {criteria[key]})"
    return explanation

def run_expert_system():
    print("üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π!")
    while True:
        criteria = get_user_criteria()
        results = recommend_plants(criteria)

        if results:
            print(f"\nüîé –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π:\n")
            for plant in results:
                print(f"- {plant['name']} ({plant['path']})")
                print(explain_result(plant, criteria))
                print()
        else:
            print("üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        cont = input("\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if cont != '–¥–∞':
            break

if __name__ == "__main__":
    run_expert_system()
